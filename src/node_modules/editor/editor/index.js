// ------------------------------------------------------------------------- 3rd

var prelude = require('prelude-ls');

var oop = require('oop').oop;

// -------------------------------------------------------------------- internal

var SessionManager = require('editor/session').SessionManager;
var Code = require('editor/code').Code;





/*******************************************************************************
 * Class: ModeInput
 ******************************************************************************/

var ModeInput = oop.Class({
	name: "Mode Input",

	desc: "This represents the input data used to add a mode to the mode manager. It is simply an association of one or multiple names to an instance of a mode.",

	schema: {
		properties: [
			{
				names: ['names', 'name', 'keys', 'key', 'ids', 'id'],
				type: oop.types.Array,
				required: true
			},
			{
				names: ['mode', 'module'],
				required: true
			}
		]
	}
});



/*******************************************************************************
 * Class: SessionInit
 ******************************************************************************/

var SessionInit = oop.Class({
	name: "Session Init",

	desc: "This represents the input data used to init a document. It is mandatory to tell in which mode/language your document will work, and you can optionally provide an initial content.",

	schema: {
		properties: [
			{
				names: ['mode', 'lang', 'language'],
				required: true
			},
			{
				names: ['source', 'src', 'text', 'input', 'content']
			},
			{
				names: ['extension', 'ext']
			}
		]
	}
});



/*******************************************************************************
 * Class: DocumentID
 ******************************************************************************/

var idPropertyNames = ['id', 'ID', 'guid', 'GUID', 'key', 'hash', 'entry', 'session', 'document', 'doc'];

var DocumentID = oop.Class({
	name: "Document ID",

	desc: "The GUID/ID object used to identify a document",

	schema: {
		inputToSpec: {
			'String': 'id'
		},
		properties: [
			{
				names: idPropertyNames,
				type: oop.types.String,
				required: true
			}
		]
	}
});


/*******************************************************************************
 * Class: Request
 ******************************************************************************/

var Request = oop.Class({
	name: "Mode Request",

	desc: "A mode request is the input for querying a service from a mode",

	schema: {
		properties: [
			{
				names: idPropertyNames,
				type: DocumentID,
				required: true
			},
			{
				names: ['service', 'svc', 'method', 'member'],
				required: true
			},
			{
				names: ['arg', 'args', 'argument', 'arguments'],
				default: {}
			}
		]
	}
});



/*******************************************************************************
 * Class: Editor
 ******************************************************************************/

var Editor = new oop.Class({
	name: "Editor",

	init: function(input) {
		this.modes = {};
		this.sessions = new SessionManager();
	},

	prototype: {
		source: function(input) {
			var documentID = DocumentID.factory(input);
			return this.getSessionData(documentID.id).code.source;
		},

		/***********************************************************************
		 * Modes management
		 **********************************************************************/

		add_modes: function(input) {
			// -----------------------------------------------------------------

			if (input == null) {
				throw {
					msg: 'Missing input for method'
				}
			}

			var mode_inputs = oop.types.Array.factory(input);

			// -----------------------------------------------------------------

			var modes = this.modes;
			mode_inputs.forEach(function(mode_input) {
				mode_input = ModeInput.factory(mode_input);

				mode_input.names.forEach(function(name) {
					modes[name] = mode_input.mode;
				});
			});
		},

		exec: function(input) {
			// -----------------------------------------------------------------

			var request = Request.factory(input);
			if (request == null) {
				throw {
					msg: 'Missing input'
				}
			}

			// -----------------------------------------------------------------

			var data = this.getSessionData(request.id);

			// -----------------------------------------------------------------

			var mode = this.modes[data.mode];
			if (mode == null) {
				throw {
					msg: 'Mode not available',
					mode: data.mode
				}
			}

			// -----------------------------------------------------------------

			var service = mode[request.service];
			if (service == null) {
				throw {
					msg: 'Service not available',
					service: request.service,
					request: request,
					input: input,
					mode: data.mode
				}
			}

			// -----------------------------------------------------------------

			try {
				return service.call(mode, data.code, request.arg);
			} catch (exception) {
				if (exception instanceof Error) {
					exception = exception.stack;
				}

				throw {
					msg: 'A problem occurred while executing a service',
					service: request.service,
					mode: data.mode,
					request: request,
					exception: exception
				}
			}
		},

		/***********************************************************************
		 * General editor services
		 **********************************************************************/

		configuration: function() {
			return  {
				tabWidth: 4
			}
		},

		/***********************************************************************
		 * Session management
		 **********************************************************************/

		init: function(input) {
			// -----------------------------------------------------------------

			if (input == null) {
				throw {
					msg: 'Missing input for method'
				}
			}
			var spec = SessionInit.factory(input);

			// ------------------------------------------------------------ mode

			var mode = spec.mode;

			if (!(mode in this.modes)) {
				throw {
					msg: 'Unavailable mode',
					mode: mode,
					modes: this.modes
				}
			}

			// ---------------------------------------------------------- source

			var code = this.modes[mode].create(spec.source, spec.extension);

			// -------------------------------------------------- Initialization

			var id = this.sessions.init({
				code: code,
				mode: mode
			});

			// -------------------------------------------------------- Response

			return DocumentID({
				guid: id
			});
		},

		getSessionData: function(document) {
			// -----------------------------------------------------------------

			if (document == null) {
				throw {
					msg: "No document given"
				}
			}

			// -----------------------------------------------------------------

			var data = this.sessions.get(document.id);

			if (data == null) {
				throw {
					msg: 'Invalid ID (no data)',
					document: document
				};
			}

			// -----------------------------------------------------------------

			return data;
		}
	}
});



exports.Editor = Editor;
